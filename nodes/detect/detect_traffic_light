#!/usr/bin/env python

import rospy
import numpy as np
import cv2
from cv_bridge import CvBridge
from sensor_msgs.msg import Image, CompressedImage
from std_srvs.srv import Trigger, TriggerResponse

class DetectTrafficLight():
    def __init__(self):
        self.lower_green = np.array(rospy.get_param("~traffic_light/green/lower"))
        self.upper_green = np.array(rospy.get_param("~traffic_light/green/upper"))

        self.get_image = False

        rospy.Service('/detect/traffic_light', Trigger, self.cb_detect_traffic_light)

        self.sub_image_type = "compressed"
        self.pub_image_type = "compressed"

        if self.sub_image_type == "raw":
            rospy.Subscriber('/camera/image', Image, self.cb_get_image, queue_size=1)
        elif self.sub_image_type == "compressed":
            rospy.Subscriber('/camera/image/compressed', CompressedImage, self.cb_get_image, queue_size=1)

        if self.pub_image_type == "raw":
            self.pub_image = rospy.Publisher('/traffic_light/image', Image, queue_size=1)
        elif self.pub_image_type == "compressed":
            self.pub_image = rospy.Publisher('/traffic_light/image/compressed', CompressedImage, queue_size=1)

        self.cv_bridge = CvBridge()

        params = cv2.SimpleBlobDetector_Params()

        params.minThreshold = 0
        params.maxThreshold = 255

        params.filterByArea = True
        params.minArea = 50
        params.maxArea = 600

        params.filterByCircularity = True
        params.minCircularity = 0.4

        params.filterByConvexity = True
        params.minConvexity = 0.6

        self.detector = cv2.SimpleBlobDetector_create(params)

        self.counter = 1

    def cb_detect_traffic_light(self, _):
        self.image = None
        self.get_image = True

        rate = rospy.Rate(10)
        while not rospy.is_shutdown() and self.image is None:
            rate.sleep()

        self.success = False

        start_time = rospy.get_time()
        while not rospy.is_shutdown() and rospy.get_time() - start_time < 10 and not self.success:
            self.fn_find_traffic_light()
            rate.sleep()

        self.get_image = False
        return TriggerResponse(success=self.success)

    def cb_get_image(self, image_msg):
        if not self.get_image:
            return

        if self.counter % 3 != 0:
            self.counter += 1
            return
        else:
            self.counter = 1

        if self.sub_image_type == "raw":
            self.image = self.cv_bridge.imgmsg_to_cv2(image_msg, "bgr8")
        elif self.sub_image_type == "compressed":
            self.image = self.cv_bridge.compressed_imgmsg_to_cv2(image_msg, "bgr8")

    def fn_find_traffic_light(self):
        green_mask = self.fn_mask_green_traffic_light()
        green_mask = cv2.GaussianBlur(green_mask, (5, 5), 0)

        self.fn_find_circle_of_traffic_light(green_mask)

    def fn_mask_green_traffic_light(self):
        hsv = cv2.cvtColor(self.image, cv2.COLOR_BGR2HSV)

        green_mask = cv2.inRange(hsv, self.lower_green, self.upper_green)

        return cv2.bitwise_not(green_mask)

    def fn_find_circle_of_traffic_light(self, mask):
        key_pts = self.detector.detect(mask)

        if key_pts:
            self.success = True
            self.image = cv2.drawKeypoints(self.image, key_pts, None,
                                           color=(0, 255, 255), flags=cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)

        if self.pub_image_type == "raw":
            self.pub_image.publish(self.cv_bridge.cv2_to_imgmsg(self.image, "bgr8"))
        elif self.pub_image_type == "compressed":
            self.pub_image.publish(self.cv_bridge.cv2_to_compressed_imgmsg(self.image, "jpg"))

if __name__ == '__main__':
    try:
        rospy.init_node('detect_traffic_light')
        node = DetectTrafficLight()
        rospy.spin()
    except rospy.ROSInterruptException:
        pass